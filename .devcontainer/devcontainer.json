// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose
{
	"name": "QoL Backend API Dev Container with DB",

	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// These paths are relative to the .devcontainer directory
	"dockerComposeFile": [
		"../dev/docker-compose.dev.yml",
		"../dev/docker-compose.dev.db-override.yml"
	],

	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
	"service": "dev",

	// Pre-build images in dependency order to ensure everything is available
	"initializeCommand": "bash -c 'set -e; echo \"Building base images...\"; docker compose -f dev/docker-compose.dev.yml build runtime-base testing-builder; echo \"Base images built. Building all services...\"; docker compose -f dev/docker-compose.dev.yml -f dev/docker-compose.dev.db-override.yml build; echo \"All builds completed!\"'",

	// Only start the dev service - db will start automatically due to depends_on
	"runServices": ["dev"],

	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/qol_backend_api",

	// Essential mounts for Docker-out-of-Docker
	"mounts": [
		"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind"
	]

	// NOTE: No remoteUser needed - user is already set in Dockerfile (USER appuser) 
	// and docker-compose.yml (user: "1000:1000"). Adding remoteUser here is redundant.
}
